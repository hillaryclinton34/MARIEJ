"""
cpu.py takes the memory generated by assembler.py and executes its instructions. Instance objects are used instead of
static methods, allowing for easier "cleanup" after MARIEJ has been used.
"""

class MJCPU:
    def __init__(self):
        self.memory = [0] * 4096

        # registers
        self.AC = 0
        self.MQ = 0
        self.PC = 0
        self.IR = 0
        self.MAR = 0
        self.MDR = 0

        self.handlers = {
            1: self.MJ_load,
            2: self.MJ_store,
            3: self.MJ_add,
            4: self.MJ_subtract,
            5: self.MJ_input,
            6: self.MJ_output,
            7: self.MJ_halt
        }

    def run(self):
        try:
            while True:
                # fetch
                self.MAR = self.PC
                self.MDR = self.memory[self.MAR]
                self.IR = self.MDR
                self.PC += 1

                # decode - uses floor division to extract top 4 bits and modulus division for bottom 12
                opcode = self.IR // 4096
                address = self.IR % 4096

                # execute
                handler = self.handlers.get(opcode)
                handler(address)
        except StopIteration:
            pass

    def MJ_load(self, address):
        self.MAR = address
        self.MDR = self.memory[self.MAR]
        # "removes" top 4 bits from value at the address, and loads that into AC
        self.AC = self.MDR & 4095

    def MJ_store(self, address):
        self.MAR = address
        self.MDR = self.AC & 4095
        self.memory[self.MAR] = self.MDR

    def MJ_add(self, address):
        self.MAR = address
        self.MDR = self.memory[self.MAR]
        self.AC = (self.AC + self.MDR) & 4095

    def MJ_subtract(self, address):
        self.MAR = address
        self.MDR = self.memory[self.MAR]
        self.AC = (self.AC - self.MDR) & 4095

    # address is being passed to each handler, so must set address = None since it's unused
    def MJ_input(self, address=None):
        inp = int(input("INPUT: "))
        self.AC = inp & 4095

    def MJ_output(self, address=None):
        print("OUTPUT: ", self.AC)

    def MJ_halt(self, address=None):
        raise StopIteration

